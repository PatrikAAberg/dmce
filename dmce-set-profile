#!/usr/bin/python3

import sys
import argparse
import os

descr = 'Set dmce profile. Modifies .dmceconfig and filter files in the dmce config directory.'

parser = argparse.ArgumentParser(description=descr)
parser.add_argument('profile',    type=str,    help='Available profiles: printf trace trace-mc coverage syslog racetrack heatmap')
parser.add_argument('-f', '--file',   type=str, default = None, help='What config file to update, default: $HOME/.dmceconfig')
parser.add_argument('-d', '--configdir',   type=str, default = None, help='What config folder to update, default: $HOME/.config/dmce')
parser.add_argument('-e', '--exclude',   type=str, default = 'do-not-exclude-anything', help='Comma separated list of files and functions to exclude: <file,:function,file:function >')
parser.add_argument('-i', '--include',   type=str, default = '.*',   help='Comma separated list of files and functions to include: <file,:function,file:function >')
parser.add_argument('-m', '--memlimit',   type=str, default = '50',   help='If used memory on the system exceeds this limit, DMCE will halt and not spawn new jobs until used memory goes below the limit again (default: 50)')
parser.add_argument('-c', '--constructs',   type=str, default = None,   help='Comma separated list of words that filter out lines to not probe')
parser.add_argument('-p', '--keeppaths',  action='store_true',        help='If set, keep paths in .dmceconfig and only update probe file')
parser.add_argument('-v', '--verbose',  action='store_true',        help='verbose output')
parser.add_argument('-s', '--sysincludes',  action='store_true',        help='If set, dmce will use the system include files when parsing code')
parser.add_argument('-t', '--notemplates',  action='store_true',        help='If set, dmce will not probe templates')
parser.add_argument('-n', '--fixnullptr',  action='store_true',        help='If set, dmce will will try to return nullptr instead of \'0\' for C++ when appropriate')
parser.add_argument('-r', '--noderefs',  action='store_true',        help='If set, dmce will not try to de-reference pointers or struct members in trace probes (useful when looking for bad dereferences')
args = parser.parse_args()

if "do-not-exclude-anything" not in args.exclude:
    excludes = args.exclude.split(',')
else:
    excludes = [args.exclude]

if ".*" not in args.include:
    includes = args.include.split(',')
else:
    includes = [args.include]

if args.constructs is not None:
    constructs = args.constructs.split(',')
else:
    constructs = []

homeDirectory = os.getenv("HOME")

if args.file is None:
    if (not os.path.isfile(homeDirectory + "/.dmceconfig")):
        print("Could not find a dmce configuration in " + homeDirectory)
        print("Please run dmce-setup")
        print("     or")
        print("./dmce-configure-local # from the dmce git root")
        print("     or")
        print("manually create:")
        print(homeDirectory + "/.dmceconfig")
        print(homeDirectory + "/.config/dmce/dmce.exclude")
        print(homeDirectory + "/.config/dmce/dmce.include")
        print(homeDirectory + "/.config/dmce/cmdlookuphook.sh")
        print(homeDirectory + "/.config/dmce/constructs.exclude")
        print(homeDirectory + "/.config/dmce/recognizedexpressions.py")
        sys.exit(1)

if args.file is None:
    filename =  homeDirectory + "/.dmceconfig"
else:
    filename = args.file

fcfg = open(filename)
clines = fcfg.readlines()
fcfg.close()

def setProbeOrProlog(cstring, basename):
    if not args.keeppaths:
        return cstring.split(':')[0] + ":/usr/share/dmce/" + basename + "\n"
    else:
        return cstring.split(':')[0] + ":" + os.path.dirname(cstring.split(':')[1]) + "/" + basename + "\n"

# Modify config file
count = 0
while count < len(clines):

    if not '#' in clines[count]:

        # Allow dereferences?
        if "DMCE_ALLOW_DEREFERENCES" in clines[count]:
            if args.noderefs:
                clines[count] = "DMCE_ALLOW_DEREFERENCES:NO\n"
            else:
                clines[count] = "DMCE_ALLOW_DEREFERENCES:YES\n"

        # Probe templates?
        if "DMCE_PROBE_TEMPLATES" in clines[count]:
            if args.notemplates:
                clines[count] = "DMCE_PROBE_TEMPLATES:NO\n"
            else:
                clines[count] = "DMCE_PROBE_TEMPLATES:YES\n"

        # Fix nullptr?
        if "DMCE_FIX_NULLPTR" in clines[count]:
            if args.fixnullptr:
                clines[count] = "DMCE_FIX_NULLPTR:YES\n"
            else:
                clines[count] = "DMCE_FIX_NULLPTR:NO\n"

        # Modify memory limit?
        if "DMCE_MEMORY_LIMIT" in clines[count]:
            clines[count] = "DMCE_MEMORY_LIMIT:" + args.memlimit + "\n"

        # Use system include files?
        if "DMCE_SYS_INCLUDES" in clines[count]:
            if args.sysincludes:
                clines[count] = "DMCE_SYS_INCLUDES:YES\n"
            else:
                clines[count] = "DMCE_SYS_INCLUDES:NO\n"

        # trace profile
        if args.profile == "trace":
            if "DMCE_NUM_DATA_VARS" in clines[count]:
                clines[count] = "DMCE_NUM_DATA_VARS:10\n"

            if "DMCE_PROBE_SOURCE" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-probe-trace-atexit-DX-CB.c")

            if "DMCE_PROBE_PROLOG" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-prolog-trace-DX.c")

            if "DMCE_POST_HOOK" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-post-hook-null")

        # trace-mt profile
        elif args.profile == "trace-mc":
            if "DMCE_NUM_DATA_VARS" in clines[count]:
                clines[count] = "DMCE_NUM_DATA_VARS:5\n"

            if "DMCE_PROBE_SOURCE" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-probe-trace-atexit-DX-SB.c")

            if "DMCE_PROBE_PROLOG" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-prolog-trace-DX.c")

            if "DMCE_PROBE_NBR_OPTIONAL_ELEMENTS" in clines[count]:
                clines[count] = "DMCE_PROBE_DEFINE:DMCE_PROBE_NBR_OPTIONAL_ELEMENTS 5\n"

            if "DMCE_POST_HOOK" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-post-hook-null")

        # coverage profile
        elif args.profile == "coverage":
            if "DMCE_NUM_DATA_VARS" in clines[count]:
                clines[count] = "DMCE_NUM_DATA_VARS:0\n"

            if "DMCE_PROBE_SOURCE" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-probe-user-atexit.c")

            if "DMCE_PROBE_PROLOG" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-prolog-default.c")

            if "DMCE_POST_HOOK" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-post-hook-null")

        # heatmap profile
        elif args.profile == "heatmap":
            if "DMCE_NUM_DATA_VARS" in clines[count]:
                clines[count] = "DMCE_NUM_DATA_VARS:0\n"

            if "DMCE_PROBE_SOURCE" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-probe-heatmap.c")

            if "DMCE_PROBE_PROLOG" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-prolog-default.c")

            if "DMCE_POST_HOOK" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-post-hook-null")

        # syslog profile
        elif args.profile == "syslog":
            if "DMCE_NUM_DATA_VARS" in clines[count]:
                clines[count] = "DMCE_NUM_DATA_VARS:0\n"

            if "DMCE_PROBE_SOURCE" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-probe-syslog.c")

            if "DMCE_PROBE_PROLOG" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-prolog-default.c")

            if "DMCE_POST_HOOK" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-post-hook-null")

        # printf profile
        elif args.profile == "printf":
            if "DMCE_NUM_DATA_VARS" in clines[count]:
                clines[count] = "DMCE_NUM_DATA_VARS:0\n"

            if "DMCE_PROBE_SOURCE" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-probe-user.c")

            if "DMCE_PROBE_PROLOG" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-prolog-default.c")

            if "DMCE_POST_HOOK" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-post-hook-null")

        # racetrack profile
        elif args.profile == "racetrack":
            if "DMCE_NUM_DATA_VARS" in clines[count]:
                clines[count] = "DMCE_NUM_DATA_VARS:0\n"

            if "DMCE_PROBE_SOURCE" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-probe-racetrack.c")

            if "DMCE_PROBE_PROLOG" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-prolog-racetrack.c")

            if "DMCE_POST_HOOK" in clines[count]:
                clines[count] = setProbeOrProlog(clines[count], "dmce-post-hook-racetrack")

        else:
            print("Unknown profile (please use trace, trace-mc, coverage, heatmap, racetrack, printf or syslog), abort")
            sys.exit(1)

# Modify config folder

    count += 1


if args.verbose:
    print("Updated config file: " + filename)
    print("Profile: " + args.profile)
    print("Excluded files and/or functions:")
    print(excludes)
    print("Included files and/or functions:")
    print(includes)
    print("Excluded constructs (textual search):")
    print(constructs)

# write back config file
fcfg = open(filename, "w")
for line in clines:
   fcfg.write(line)
fcfg.close()

if args.configdir is None:
    configdir = homeDirectory + "/.config/dmce"
else:
    configdir = args.configdir

# write dmce.exclude file
fexcl = open(configdir + "/dmce.exclude", "w")
for line in excludes:
   fexcl.write(line + "\n")
fexcl.close()

# write dmce.include file
fincl = open(configdir + "/dmce.include", "w")
for line in includes:
   fincl.write(line + "\n")
fincl.close()# write dmce.include file

if args.constructs is not None:
    fcon = open(configdir + "/constructs.exclude", "w")
    for line in constructs:
        fcon.write(line + "\n")
    for a in range(ord('A'), ord('Z') + 1):
        for b in range(ord('A'), ord('Z') + 1):
            fcon.write(chr(a) + chr(b) + "\n")
    fcon.close()
