#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Copyright (c) 2021 Ericsson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

function usage() {
    cat << EOF
NAME
        Decode DMCE trace buffer

SYNOPSIS
        dmce-trace-viewer data-file probe-file code-tree-path

OPTIONS

PREREQUISITE
        Setup dmce for trace, run dmce on a git, build any executable and run it.

DESCRIPTION
        Provides an enhanced, more feature-rich trace view than the output of dmce-trace.

        It's possible to force the viewer to 'gui', 'tgui', 'less', 'stdout', 'stderr' or '<file>'. See EXAMPLES below!

CONFIGURATION
        # select trace viewer tool (if not set, default to tgui)
        export DMCE_TRACE_VIEWER gui|tgui|stdout|stderr|less|<file>

EXAMPLES
        All examples below assume that the current working directory is your git repository root.

        $ cd mygit

        # decode the trace buffer and launch an interactive terminal gui (tgui)
        $ dmce-trace-viewer /tmp/\$USER/dmce/dmcebuffer.bin /tmp/\$USER/dmce/mygit/probe-references.log \$PWD

        # decode the trace buffer and display the trace on stdout
        $ DMCE_TRACE_VIEWER=stdout dmce-trace-viewer /tmp/\$USER/dmce/dmcebuffer.bin /tmp/\$USER/dmce/mygit/probe-references.log \$PWD

        # decode the trace buffer and save the trace to a file '/tmp/a.trace'
        $ DMCE_TRACE_VIEWER=/tmp/a.trace dmce-trace-viewer /tmp/\$USER/dmce/dmcebuffer.bin /tmp/\$USER/dmce/mygit/probe-references.log \$PWD

        # decode the trace buffer using a _non-probed_ tree and display the trace using tgui
        $ DMCE_TRACE_VIEWER=tgui dmce-trace-viewer /tmp/\$USER/dmce/dmcebuffer.bin /tmp/\$USER/dmce/mygit/probe-references-original.log \$PWD

        # decode the trace buffer using a _probed_ tree and display the trace using less
        $ DMCE_TRACE_VIEWER=less dmce-trace-viewer /tmp/\$USER/dmce/dmcebuffer.bin /tmp/\$USER/dmce/mygit/probe-references.log \$PWD
EOF
    exit 1
}

function init() {
    # usage and sanity checks
    if [ $# -ne 3 ]; then
        usage
    fi
    data=$1
    probes=$2
    git_full=$3
    git=$(basename "$git_full")

# TODO: remove or check comma-separated list
#    if [ ! -d "${git_full}" ]; then
#        echo "error: ${git_full} is not a directory" 1>&2
#        usage
#    fi
}

function cleanup() {
    for f in $files; do
        if [ -e "$f" ]; then
            rm "$f"
        fi
    done
}

function main() {
    init "$@"

    trap cleanup EXIT

    dmce_trace_log="$(mktemp --suffix=-dmce-trace-"${git}".log)"
    dmce_trace_args=
    # not set, select tgui
    if [ "$DMCE_TRACE_VIEWER" = "" ]; then
        DMCE_TRACE_VIEWER="tgui"
    fi

    dmce_trace_args+=" --delimiter @"
    if [ "$DMCE_TRACE_VIEWER" = "gui" ]; then
        dmce_trace_args+=" --bundle"
    fi
    dmce_trace_args+=" -t"
    #dmce_trace_args+=" --verbose"
    dmce_trace_args+=" $data"
    dmce_trace_args+=" $probes"
    dmce_trace_args+=" ${git_full}"

    if ! eval dmce-trace "${dmce_trace_args}" > "${dmce_trace_log:?}"; then
        echo "error: 'dmce-trace ${dmce_trace_args}' failed" 1>&2
        exit 1
    fi

    # sanity check
    if [ ! -s "${dmce_trace_log:?}" ]; then
        echo "error: dmce-trace was successful but we got no output" 1>&2
        exit 1
    fi
    files+=" ${dmce_trace_log}"

    # TODO: Remove or make work with comma-separated list
#    echo "$ cd ${git_full}"
#    if ! cd "${git_full}"; then
#        echo "error: 'cd ${git_full}' failed, weird!" 1>&2
#        exit 1
#    fi

    # display the log
if [ "$DMCE_TRACE_VIEWER" = "" ] || [ "$DMCE_TRACE_VIEWER" = "stdout" ]; then
    cat "${dmce_trace_log:?}"
elif [ "$DMCE_TRACE_VIEWER" = "less" ]; then
    less -r "${dmce_trace_log:?}"
elif [ "$DMCE_TRACE_VIEWER" = "stderr" ]; then
    cat "${dmce_trace_log:?}" 1>&2
elif [ "$DMCE_TRACE_VIEWER" = "tgui" ]; then
    dmce-trace-tgui "${dmce_trace_log:?}"
elif [ "$DMCE_TRACE_VIEWER" = "gui" ]; then
    if command -v dmce-wgui.sh > /dev/null; then
        dmce-wgui.sh "$(awk '{print $NF}' "${dmce_trace_log:?}")"
    fi
else
    echo "saving trace as '$(readlink -f $DMCE_TRACE_VIEWER)'"
    if ! column -t -s'@' "${dmce_trace_log:?}" > $DMCE_TRACE_VIEWER; then
        exit 1
    fi
fi
}

main "$@"
