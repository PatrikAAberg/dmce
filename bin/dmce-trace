#!/usr/bin/python3

# Copyright (c) 2021 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import numpy as np
import sys
import argparse
import os
import re
import glob
import multiprocessing
import subprocess
from colorama import Fore, Back, Style

desc_gen = '''

general:

  Parameters \'probefile\' and \'codetree\' can be comma separated lists if tracing code from more than one repo.

  In order for dmce-trace to obtain unique probe numbers for dmce passes on multiple repos separate probe number
  ranges shall be used, please see dmce --help for more info.

'''

desc_epi = '''


'''

parser = argparse.ArgumentParser(description = desc_gen, epilog = desc_epi, formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('dfile',            type=str,                   help='default: /tmp/$USER/dmce/dmcebuffer.bin-[program invocation short name].[pid]')
parser.add_argument('probefile',        type=str,                   help='default: /tmp/$USER/dmce/name-of-git/probe-references.log')
parser.add_argument('codetree',         type=str,                   help='path to code tree (git)')
parser.add_argument('--numvars',        type=int,                   help='Max number of variables, default: 5')
parser.add_argument('--sourcewidth',    type=int, default=80,       help='Width of source code lines, default: 80')
parser.add_argument('-A',               type=int, default=0,        help='Number of trailing source code lines, default: 0')
parser.add_argument('-B',               type=int, default=0,        help='Number of leading source code lines, default: 0')
parser.add_argument('-c',               type=str, default="nocores",help='Comma-separated list of cores to display')
parser.add_argument('--showprobes',     action='store_true',        help='Make probes visible')
parser.add_argument('--verbose',        action='store_true',        help='Verbose output')
parser.add_argument('--delimiter',      type=str, default=":",      help='Delimiter. Default: :')
parser.add_argument('--format',         type=str, default="column", help='Output format (column|raw)')
parser.add_argument('--sort',           type=str, default="seq",    help='Sorting scheme (seq|heat|uniq|collapse), default: seq')
parser.add_argument('-t',               action='store_true',        help='Show timestamps')
parser.add_argument('--hl',             action='store_true',        help='Highlight current source code line')
parser.add_argument('--bundle',         action='store_true',        help='Generate bundle .zip file in current directory, implies -t --delimiter @')
parser.add_argument('--nocompress',     action='store_true',        help='Used together with --bundle creates uncompressed .zip archive')
parser.add_argument('--nosrc',          action='store_true',        help='Used together with --bundle to avoid source files within .zip archive')
parser.add_argument('--followsymlinks', action='store_true',        help='Also follow symbolic links when adding source tree files into the bundle')

args = parser.parse_args()

if not os.path.isfile(args.dfile):
    print("dmce-trace: Could not find data file : " + args.dfile, file = sys.stderr)
    exit(1)

if not os.path.isfile(args.dfile + ".info"):
    print("dmce-trace: Could not find .info file: " + args.dfile + ".info", file = sys.stderr)
    exit(1)

if args.sort == "seq":
    trace_out = True
else:
    trace_out = False
    if args.bundle:
        print("dmce-trace: Can not combine --bundle and --sort, abort", file = sys.stderr)

outfile = sys.stdout

if args.bundle:
    args.t = True
    args.delimiter = "@"
    noutfile = os.path.basename(args.dfile)
    noutfile = noutfile.replace("dmcebuffer.bin","dmce-trace")
    print("Creating bundle as " + os.getcwd() + "/" + noutfile + ".zip")
    outdir = noutfile
    outzip = outdir + ".zip"
    noutfilebase = noutfile
    noutfile = noutfile + ".dmcetracefrag-0"
    outfile = open(noutfile, "w")
    outfilenames = [noutfile]

trailing=args.A
leading=args.B
showtimestamps = args.t
parallel = False
CHUNK_SIZE = 1024 * 128

# Adjust this according to trace entry struct in probe
TRACE_ENTRY_HEADER = 3

if showtimestamps and args.sort != "seq":
    print("dmce-trace: error: -t cannot be combined with --sort, abort", file = sys.stderr)
    sys.exit(1)

if trailing > 0 or leading > 0:
    keep_src_indent = True
else:
    keep_src_indent = False
    if args.sort == "seq":
        parallel = True

if not 'nocores' in args.c:
    cores = args.c.split(',')
else:
    cores = None

dfile = args.dfile
ifilename = dfile + ".info"
ifile = open(ifilename)
info_tmp = ifile.readlines()
ifile.close()
info = []
uniqsourcefiles = []
timestamps2nsecs = 0;
timestamp_start = 0;

count = 0
for line in info_tmp:
    if not "#" in line:
        print(line.rstrip(), file = outfile)
        info.append(line)
    else:
        fields = line.split(" ")
        if "trace-start-tsc" in line:
            start_tsc = int(fields[2])
            count += 1
        elif "trace-end-tsc" in line:
            end_tsc = int(fields[2])
            count += 1
        elif "trace-start-secs" in line:
            start_secs = int(fields[2])
            count += 1
        elif "trace-end-secs" in line:
            end_secs = int(fields[2])
            count += 1
        elif "trace-start-nsecs" in line:
            start_nsecs = int(fields[2])
            count += 1
        elif "trace-end-nsecs" in line:
            end_nsecs = int(fields[2])
            count += 1

if count >= 6:
    timestamps2nsecs = (end_tsc - start_tsc) / ( 1000000000 * (end_secs - start_secs) + (end_nsecs - start_nsecs))
    if args.verbose:
        print("CPU timestamps to nanoseconds divider (Nominal cpu clock freq): " + str(timestamps2nsecs), file=sys.stderr)


probefiles = args.probefile
codetrees = args.codetree

if args.numvars is not None:
    entrysize64 = TRACE_ENTRY_HEADER + args.numvars
else:
    if args.verbose:
        print("Checking trace entry size", file=sys.stderr)
    entrysize64 = 42
    for infoline in info:
        if "te size:" in infoline:
            entrysize64 = int(int(re.search(r'te size: (\d+)', infoline)[1]) / 8)
            args.numvars = entrysize64 - TRACE_ENTRY_HEADER
            break
    if entrysize64 == 42:
        print("dmce trace: Could not find trace entry size in " + ifilename + ", abort" + str(entrysize64), file=sys.stderr)
        sys.exit(1)

if args.verbose:
    print("Raw input file   : " + dfile, file=sys.stderr)
    print("Probe ref file(s): " + probefiles, file=sys.stderr)
    print("Code tree(s)     : " + codetrees, file=sys.stderr)

probefile = probefiles.split(",")
codetree = codetrees.split(",")
numfrefs = len(probefile)
if numfrefs != len(codetree):
    print("Number of probe reference files does not match number of code trees, abort", file = sys.stderr)
    exit(1)

for pf in probefile:
    if not os.path.isfile(pf):
        print("dmce-trace: Could not find probe references file: " + pf, file = sys.stderr)
        exit(1)

for cd in codetree:
    if not os.path.isdir(cd):
        print("dmce-trace: Could not find code tree: " + cd, file = sys.stderr)
        exit(1)

# Read probe refs files
prefs = []
for i in range(numfrefs):
    pf = open(probefile[i])
    prefs.append(pf.readlines())
    pf.close()

# Retrieve probe number intervals
pinterval = []
for i in range(numfrefs):
    tmp = []
    tmp.append(int(prefs[i][0].rstrip().split(':')[0]))
    tmp.append(int(prefs[i][len(prefs[i]) - 1].rstrip().split(':')[0]))
    pinterval.append(tmp)

# Sanity check if original files  - probed state combo
for i in range(numfrefs):
    original = False
    if "original" in probefile[i]:
        original = True

    state_probed = False
    if os.path.exists(codetree[i] + "/.dmce_state_probed"):
        state_probed  = True

    if state_probed:
        print("Probed code tree: yes", file = outfile)
    else:
        print("Probed code tree: no", file = outfile)

    if state_probed and original:
        print("dmce trace: Detected a probed code tree " + codetree[i] + " combined with " + probefile[i]  + "   Please run dmce -c to clear probes or use probe-references.log instead, abort", file=sys.stderr)
        exit (1)

    if not state_probed and not original:
        print("dmce trace: Detected a non-probed code tree " + codetree[i] + "combined with " + probefile[i]  + "   Please probe the tree or use probe-references-original.log instead, abort", file=sys.stderr)
        exit (1)

# Sanity check if files in probe ref file exist in code tree
for i in range(numfrefs):
    for ref in prefs[i]:
        # Check if referenced files exist
        if not os.path.exists(codetree[i] + "/" + ref.rstrip().split(':')[1]):
            print("dmce trace: Probe reference file refers to the file " + codetree[i] + "/" + ref.rstrip().split(':')[1] + " but is does not exist, abort", file=sys.stderr)
            exit (1)

# Find longest path-func combo
longestpath=0

for i in range(numfrefs):
    for s in prefs[i]:
        s = ":".join(s.split(":")[1:4])
        l = len(s)
        if l > longestpath:
            longestpath = l

if args.verbose:
    print("Reading trace buffer", file=sys.stderr)

# Read data
data = np.fromfile(dfile, dtype=np.uint64)

if args.verbose:
    print("Sorting out ring buffer", file=sys.stderr)

# uint64_t timestamp, uint64_t probenbr, n * uint64_t variable value
# Find first timestamp where a buffer is exhausted
# TODO: Only search in probes field
deadbeefs = np.where(data == int("deadbeef", 16))
if len(deadbeefs[0]) > 0:
    deadbeefs = deadbeefs[0]
    deadbeeftimestamps = []
    for index in deadbeefs:
        ts = data[index - 1]
        deadbeeftimestamps.append(ts)
    deadbeeftimestamps = np.sort(deadbeeftimestamps)
    fulltracelimit = deadbeeftimestamps[0]
else:
    fulltracelimit = None

length = int(len(data) / entrysize64)
if ( (entrysize64 * length) != len(data) ):
    print("error: datafile has wrong alignment, abort", file=sys.stderr)
    sys.exit(1)

data = np.reshape(data, (length, entrysize64))

if args.verbose:
    print("Sort timestamps", file=sys.stderr)

# Sort on timstamps
data = data[data[:, 0].argsort()]

def stripProbe(s):
    substr = r'\(DMCE_PROBE\(\d*'
    for i in range(0, args.numvars):
        substr = substr + r'\,[^\,]*'

    substr = substr + r'\), '
    s = re.sub(substr, '', s)
    # last paren
    m = re.search(r'.*(\(.*\))*(\))',s)
    if m:
        s = s[:m.start(2)] + s[m.end(2):]
    return s

def getSourceAndVars(sl, vs, varnames):

    richvs = args.delimiter

    i = 0
    for v in varnames:
        richvs = richvs + v + ":0x" + vs[i] + " "
        i += 1

    return sl, richvs.strip()

def stripProbeExtractVars(sl, vs):
    regexp = r'(.*)\(DMCE_PROBE\(\d*'

    for i in range (0, args.numvars):
        regexp = regexp + r'\,(?:\(uint64_t\))*([^\,]*)'

    regexp = regexp + r'\)\, (.*)'
    richvs = args.delimiter

    slm = re.match(regexp, sl)
    if slm:
        sl = slm.group(1) + slm.group(args.numvars + 2)

        # last paren
        m = re.search(r'.*(\(.*\))*(\))', sl)
        if m:
            sl = sl[:m.start(2)] + sl[m.end(2):]

        for i in range (0, args.numvars):
            if slm.group(i + 2) != '0':
                richvs = richvs + slm.group(i + 2) + ":0x" + vs[i] + " "
    return sl, richvs

def notComplete(timestamp):

    if fulltracelimit is None:
        return False
    if fulltracelimit >= timestamp:
        return False
    else:
        return True

# Cache dir tree and source code
tree = []
treedict = []
probedtree = []
symlinks = []

for i in range(numfrefs):

    treedict_tmp = {}
    probedtree_tmp = False
    re_source = re.compile(r'\.c$|\.cpp$|\.cc$|\.h$|\.hh$')

    searchpath = codetree[i]

    if args.followsymlinks:
        tree_tmp = glob.glob(searchpath + "/**", recursive = True)

    else:
        cmd = (
            f'find {searchpath} -type f ! -path '
            f'"$(find {searchpath} -type l -exec readlink -f {{}} \\; | sed \'s|$|/*|\' | tr \'\\n\' \':\')"'
        )

        result = subprocess.run(cmd, shell=True, text=True, capture_output=True, check=True)
        tree_tmp = result.stdout.splitlines()

    for filename in tree_tmp:
        if os.path.isfile(filename) and re_source.search(filename):
            if filename not in uniqsourcefiles:
                uniqsourcefiles.append(filename)
            f = open(filename, errors="replace")
            treedict_tmp[filename] = f.readlines()
            f.close()
            if probedtree_tmp == False:
                for s in treedict_tmp[filename]:
                    if "DMCE_PROBE" in s:
                        probedtree_tmp = True

    tree.append(tree_tmp)
    treedict.append(treedict_tmp)
    probedtree.append(probedtree_tmp)

if args.verbose:
    print("Generating trace output", file=sys.stderr)

print("- - - - -", file = outfile)

def produce_chunk(outbufs, outbufs_index, range_start, range_end):

    outbuf = []

    n = range_start
    while n < range_end:
        # Convert to nsecs?
        if timestamps2nsecs:
            data[n, 0] = int((data[n, 0] - start_tsc) / timestamps2nsecs) + start_secs * 1000000000 + start_nsecs

        ts = data[n, 0]
        pnum = data[n, 1]
        cpu = data[n, 2]

        if cores is not None and str(cpu) not in cores:
            n += 1
            continue

        if pnum != 3735928559 and ts != 0:                         # not 0xdeadbeef, timestamp exist

            # Special probe number hexdump header
            if pnum == 1024 * 1024 * 1024:
                cpu = cpu.astype(int)
                hdnum = cpu >> 32
                cpu = cpu & 0xfff
                size = data[n, 3]
                num_entries = data[n, 4]
                outstr = str(cpu) + args.delimiter
                outstr += str(ts) + args.delimiter
                outstr += "---" + args.delimiter
                outstr += "---" + args.delimiter
                outstr += "dmce_hexdump_" + str(hdnum) + args.delimiter
                outstr += "---" + args.delimiter
                outstr += "dmce_hexdump:" + str(hdnum) + " "
#                print("Header, num entries: " + str(num_entries) + "   cpu: " + str(data[n, 2]), file=sys.stderr)
                n += 1
                while n < length and num_entries > 0:
                    pnum = data[n, 1]
#                    print("Check payload, pnum: " + str(pnum) + "  cpu: " + str(data[n, 2]), file=sys.stderr)
                    if pnum  == 1024 * 1024 * 1024 + 1 and cpu == data[n, 2]:
                        num_entries -= 1
                        hexstr = ""
                        hexstr += str(int(data[n,3]).to_bytes(8, "little").hex())
                        hexstr += str(int(data[n,4]).to_bytes(8, "little").hex())
                        hexstr += str(int(data[n,5]).to_bytes(8, "little").hex())
                        hexstr += str(int(data[n,6]).to_bytes(8, "little").hex())
                        hexstr += str(int(data[n,7]).to_bytes(8, "little").hex())
                        outstr += ' '.join(hexstr[i:i+2] for i in range(0, len(hexstr), 2)) + " "
#                        print("Payload, num_entries: " + str(num_entries), file=sys.stderr)
#                        print(outstr)
                    n += 1
#                print("Done writing payload, num entries: " + str(num_entries), file=sys.stderr)
                outbuf.append(outstr)
                continue

            # Special probe number hexdump data
            # Just skip over, the thread catching the header will embed all data into one entry
            if pnum == 1024 * 1024 * 1024 + 1:
                n += 1
                continue

            # Special probe number dmce_intial_overhead
            if pnum == 1024 * 1024 * 1024 + 2:
                outstr = str(cpu) + args.delimiter
                outstr += str(ts) + args.delimiter
                outstr += "---" + args.delimiter
                outstr += "---" + args.delimiter
                outstr += "dmce_initial_overhead" + args.delimiter
                outstr += "---" + args.delimiter
                outbuf.append(outstr)
                n += 1
                continue

            # Special probe number printf header
            if pnum == 1024 * 1024 * 1024 + 3:
                cpu = cpu.astype(int)
                size = int(data[n, 3])
                num_entries = data[n, 4]
                outstr = str(cpu) + args.delimiter
                outstr += str(ts) + args.delimiter
                outstr += "---" + args.delimiter
                outstr += "---" + args.delimiter
                outstr += "dmce_printf_" + args.delimiter
                outstr += "---" + args.delimiter
                headerlen = len(outstr)
#                print("printf header, num entries: " + str(num_entries) + "   cpu: " + str(data[n, 2]) + " size (bytes): " + str(size), file=sys.stderr)
                n += 1
                while n < length and num_entries > 0:
                    pnum = data[n, 1]
#                    print("Check printf payload, pnum: " + str(pnum) + "  cpu: " + str(data[n, 2]), file=sys.stderr)
                    if pnum  == 1024 * 1024 * 1024 + 4 and cpu == data[n, 2]:
                        num_entries -= 1
                        printstr = ""
                        printstr += str(int(data[n,3]).to_bytes(8, "little"), encoding='ascii', errors="ignore")
                        printstr += str(int(data[n,4]).to_bytes(8, "little"), encoding='ascii', errors="ignore")
                        printstr += str(int(data[n,5]).to_bytes(8, "little"), encoding='ascii', errors="ignore")
                        printstr += str(int(data[n,6]).to_bytes(8, "little"), encoding='ascii', errors="ignore")
                        printstr += str(int(data[n,7]).to_bytes(8, "little"), encoding='ascii', errors="ignore")
                        outstr += printstr
#                        print("Payload, num_entries: " + str(num_entries), file=sys.stderr)
#                        print(outstr)
                    n += 1
#                print("Done writing payload, num entries: " + str(num_entries), file=sys.stderr)
                outstr = outstr[0: headerlen + size]
                outbuf.append(outstr)
                continue

            # Special probe number hexdump data
            # Just skip over, the thread catching the header will embed all data into one entry
            if pnum == 1024 * 1024 * 1024 + 4:
                n += 1
                continue

             # Which ref file index?
            refindex = sys.maxsize
            for i in range(numfrefs):
                if (pnum >= pinterval[i][0]) and (pnum <= pinterval[i][1]):
                    refindex = i
                    # adjust pnum with offset
                    pnum = int(pnum - pinterval[i][0])
                    break

            if refindex == sys.maxsize:
                print("Could not find matching reference information for probe " + str(pnum) + ", abort", file = sys.stderr)
                sys.exit(1)
            else:
                vs = []
                for v in range(0, args.numvars):
                    vs.append(format(data[n,v + 3],"04x"))

                refs = prefs[refindex][pnum].rstrip().split(':')
                fname = refs[1]
                line = int(refs[2])
                func = refs[3]
                varnames = refs[4:]
                # Editor line numbers start with 1
                line = line - 1

                # Retrieve source code from cache
                lsource = treedict[refindex][codetree[refindex] + "/" + fname]

                # reset fname
                if args.sort == "heat" or args.sort == "collapse" or args.sort == "uniq":
                    fname = ""
                else:
                    fname = str(cpu)

                if showtimestamps:
                    fname += args.delimiter + str(ts)

                if args.bundle:
                    path = os.path.basename(codetree[refindex]) + "/"
                else:
                    path = codetree[refindex] + "/"

                fname += args.delimiter + path + refs[1]

                if notComplete(ts):
                    fname += "<Trace incomplete>"

                if leading or trailing:
                    print("                                             ---", file = outfile)
                for lcount in range (line - leading, line + 1 + trailing):
                    if lcount > 0:
                        if 0 <= lcount < len(lsource):
                            if keep_src_indent:
                                sl = lsource[lcount].rstrip()
                            else:
                                sl = lsource[lcount].strip()
                        else:
                            continue

                        if lcount == line:
                            if not args.showprobes:
                                sl, vs = getSourceAndVars(sl, vs, varnames)
                            else:
                                if not probedtree:
                                    print("error: option --noprobes used with unprobed tree, abort", file=sys.stderr)
                                    sys.exit(1)
                                sldummy, vs = stripProbeExtractVars(sl, vs)
                            if args.sort == "heat":
                                out = [fname + args.delimiter + "+" + str(lcount+1) + args.delimiter + func + args.delimiter, sl, ""]
                            else:
                                if not args.hl:
                                    out = [fname + args.delimiter + "+" + str(lcount+1) + args.delimiter + func + args.delimiter, sl, vs]
                                else:
                                    out = [fname + args.delimiter + "+" + str(lcount+1) + args.delimiter + func + args.delimiter, Back.BLUE + sl + Style.RESET_ALL, vs]
                        else:
                            if probedtree and not args.showprobes:
                                sl = stripProbe(sl)
                            out = ["", sl, ""]

                        if (args.format == "column"):
                            fwidth = longestpath
                            if showtimestamps:
                                fwidth += 22
                            fmt = "{: <"+ str(fwidth + 2) + "} {: <"+ str(args.sourcewidth + 2) + "} {}"
                        elif (args.format == "raw"):
                            fmt = "{} {} {}"
                        else:
                            print("error: unknown format", file=sys.stderr)
                            sys.exit(1)

                        outstr = fmt.format(*out)
                        outbuf.append(outstr)
        n += 1

    outbufs[outbufs_index] = outbuf

outbufs_length = (int(length / CHUNK_SIZE) + 1)
manager = multiprocessing.Manager()
outbufs = manager.list(range(outbufs_length))
for i in range(outbufs_length):
    outbufs[i] = None

if not parallel:
    produce_chunk(outbufs, 0, 0, length)
else:
    entries_written = 0
    procs = []
    chunk_count = 0

    while (entries_written < length ):
        if (length - entries_written) < CHUNK_SIZE:
            produce_chunk(outbufs, chunk_count, entries_written, length)
        else:
            p = multiprocessing.Process(target=produce_chunk, args=(outbufs, chunk_count, entries_written, entries_written + CHUNK_SIZE,))
            procs.append(p)
            p.start()

        entries_written += CHUNK_SIZE
        chunk_count += 1

    for p in procs:
        p.join()

def write_chunk(tmpoutfilename, outbuf):
        tmpoutfile = open(tmpoutfilename,"w")
        for outstr in outbuf:
            print(outstr.encode(encoding="ascii",errors="ignore").decode(), file = tmpoutfile)
        tmpoutfile.close()


if not args.bundle:
    for outbuf in outbufs:
        if outbuf == None:
            break
        for outstr in outbuf:
            if trace_out:
                print(outstr.encode(encoding="ascii",errors="ignore").decode(), file = outfile)
else:
    # In bundles, create several numbered data files for easier handling of large traces at later stages
    filecount = 1
    procs = []
    for outbuf in outbufs:
        if outbuf == None:
            break
        tmpoutfilename = noutfilebase + ".dmcetracefrag-" + str(filecount)
# Keep this for a while
#        tmpoutfile = open(tmpoutfilename,"w")
#
#        for outstr in outbuf:
#            print(outstr.encode(encoding="ascii",errors="ignore"), file = tmpoutfile)
#        tmpoutfile.close()
        p = multiprocessing.Process(target=write_chunk, args=(tmpoutfilename, outbuf,))
        procs.append(p)
        p.start()

        outfilenames.append(tmpoutfilename)
        filecount += 1
    for p in procs:
        p.join()

def lstr(slist):
    return len(max(slist, key=len))


if args.sort != "seq":
    if args.sort == "uniq":
        sortedarr = np.unique(outbuf, return_counts=True)
        lmax = lstr(sortedarr[0])
        if args.format == "column":
            fmt = "{: <" + str(lmax) + "} {}"
        else:
            fmt = "{} {}"

        for i in range(len(sortedarr[0])):
            out = [sortedarr[0][i] , " occurs:" + str(sortedarr[1][i])]
            print( fmt.format(*out) , file = outfile)

    elif args.sort == "heat":
        arr, count = np.unique(outbuf, return_counts=True)
        sind = np.argsort(-count)
        lmax = lstr(arr)
        if args.format == "column":
            fmt = "{: <" + str(lmax) + "} {}"
        else:
            fmt = "{} {}"

        for i in sind:
            out = [arr[i] , " heat:" + str(count[i]) ]
            print( fmt.format(*out) , file = outfile)

    elif args.sort == "collapse":
        uniqarr, count = np.unique(outbuf, return_counts=True)
        arr_nodata = []
        for i in range(len(uniqarr)):
            s = uniqarr[i].split(args.delimiter)
            s = args.delimiter.join(s[:5])
            arr_nodata.append(s)

        uniqarr, count = np.unique(arr_nodata, return_counts=True)
        lmax = lstr(uniqarr)
        if args.format == "column":
            fmt = "{: <" + str(lmax) + "} {}"
        else:
            fmt = "{} {}"

        for i in range(len(uniqarr)):
            out = [uniqarr[i] , " collapsed:" + str(count[i])]
            print( fmt.format(*out) , file = outfile)

outfile.close()

# If bundle, zip it!
if args.bundle:
    import zipfile
    import fnmatch

    print("Recreating probe references...")
    merged_probe_references = []
    for i in range(len(prefs)):
        ct = os.path.basename(codetree[i])
        for line in prefs[i]:
            ltmp = line.split(':')
            ltmp[1] = ct + "/" + ltmp[1]
            ltmp = ":".join(ltmp)
            merged_probe_references.append(ltmp)

    # Prepare recreated probefile to be added to zip
    with open("global_probe_references.log", "w") as pfo:
        pfo.writelines(merged_probe_references)
        outfilenames.append("global_probe_references.log")

    with zipfile.ZipFile(outzip, 'w') as z:
        count = 0

        # Write output files (fragmented trace file, global probe refs file) to zip
        for of in outfilenames:
            if args.nocompress:
                print("Adding to archive: frag " + str(count) + " out of " + str(len(outfilenames)))
                z.write(of, of)
            else:
                print("Adding to archive (deflated): frag " + str(count) + " out of " + str(len(outfilenames)))
                z.write(of, of, compress_type=zipfile.ZIP_DEFLATED)
            count += 1

        # Write source files to zip
        if args.nosrc:
            print("info: --nosrc: skip source files in zip bundle")
        else:
            print("info: include source files in zip bundle")
            for fname in uniqsourcefiles:
                for c in codetree:
                    if c in fname:
                        dest = fname.replace(os.path.dirname(c) + "/", "")
                        if args.nocompress:
                            z.write(fname, dest)
                        else:
                            z.write(fname, dest, compress_type=zipfile.ZIP_DEFLATED)
        z.close()

    # zipfile needs a barrier
    with zipfile.ZipFile(outzip, 'r') as z:
        z.close()

    for of in outfilenames:
        os.remove(of)
    print("dmce-trace: Done!")

# end of file
