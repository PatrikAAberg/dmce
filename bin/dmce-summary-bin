#!/usr/bin/python3

# Copyright (c) 2021 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import numpy as np
import sys
import argparse
import os
from operator import itemgetter

descr = 'Print DMCE coverage, hit and total number of instrumentation probes.'

parser = argparse.ArgumentParser(description=descr)
parser.add_argument('dfile',             type=str,                   help='Binary input file')
parser.add_argument('probefile',         type=str,                   help='mypath/probe-references.log')
parser.add_argument('-v', '--verbose',   action='store_true',        help='verbose output')
parser.add_argument('-u', '--functions', action='store_true',        help='print function names')
parser.add_argument('-f', '--filter',
                    required=False,
                    type=float,
                    metavar="[0-100]",
                    help='percentage of hits to filter. Most frequent probes selected first. To be put in dmce.pos.exclude and/or dmce.pos.include')
args = parser.parse_args()

dfile = args.dfile
probefile = args.probefile
printverbose = args.verbose
printfunctions = args.functions
filterlimit = args.filter

def function_line_str(entries):
     if printfunctions:
          return '{}:{}'.format(entries[3], entries[2])
     return entries[2]

# parse the probe reference
with open(probefile, 'r') as pf:
     prefs = pf.readlines()

nprobes = len(prefs)

# Check if uint32 or uint64 counters
fsize = os.path.getsize(dfile)

# read probe data as uint32, uint64 or report error

if fsize == nprobes * 4:
    data = np.fromfile(dfile, dtype=np.uint32)
elif fsize == nprobes * 8:
    data = np.fromfile(dfile, dtype=np.uint64)
else:
    print("Data file size does not match number of probes, abort")
    sys.exit(1)

for i in range(nprobes, data.size):
     if data[i] != 0:
          print("Data file contains non-zero values outside of valid range.")
          print("File likely corrupted. Aborting.")
          sys.exit(1)


# combine into one list
res = []
for probe in range(nprobes):
     rec = prefs[probe].rstrip().split(':')
     rec.append(data[probe])
     res.append(rec)

# sort list in order of hits
res.sort(key=itemgetter(4), reverse=True)

# calculate total hits
ntothits = 0
for probe in res:
     ntothits+=probe[4]

# filter
if filterlimit != None:
     if filterlimit < 0 or filterlimit > 100:
          print("Error: Filter value out of range.")
          sys.exit(1)
     nlimit = (int)(ntothits * filterlimit / 100)
     if printverbose:
          print('total hits, wanted hits',ntothits, nlimit)

     nselected = 0
     filterfmt="{}:{}-{}"
     for probe in res:
          nselected += probe[4]
          function_line = probe[2]
          print(filterfmt.format(probe[1],function_line_str(probe),probe[2]))
          if nselected >= nlimit:
               break
     sys.exit(0)

# find the probes not executed
skipped = [item for item in res if item[4] == 0]
nskipped = len(skipped)
nhit = nprobes - nskipped

# print short result
if not printverbose:
     print('{:2.2f} {} {}'.format(100*nhit/nprobes, nhit, nprobes))

if printverbose:
     print("\n--- Dmce summary results ---")
     print('Coverage:{:2.2f}%'.format(100*nhit/nprobes))
     print('Probes executed:{}/{}'.format(nhit, nprobes))
     print("\n--- Details ---")
     headfmt = "{:<10}{:<8}{:<12}{:<12}{:<12}{}:{}"
     print(headfmt.format('id', 'status', 'count', 'hist probe', 'hist acc', 'file', 'line'))
     linefmt = "{:<10}{:<8}{:<12}{:<12.2%}{:<12.2%}{}:{}"
     nacchits = 0
     for entry in res:
          nacchits += entry[4]
          if entry[4] == 0:
               print(linefmt.format(entry[0], 'MISS', entry[4], entry[4]/ntothits, nacchits/ntothits, entry[1], function_line_str(entry)))
          else:
               print(linefmt.format(entry[0], 'HIT', entry[4], entry[4]/ntothits, nacchits/ntothits, entry[1], function_line_str(entry)))
