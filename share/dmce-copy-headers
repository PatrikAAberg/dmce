#!/usr/bin/python3

# Copyright (c) 2021 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import sys
import argparse
import os
import shutil
import re
import time
from threading import Thread

descr = 'Copies header files in #include statements from src/... to a path relative to dest'

parser = argparse.ArgumentParser(description=descr)
parser.add_argument('dirsource',    type=str,    help='Source dir')
parser.add_argument('dirdest',    type=str,    help='Destination dir')
args = parser.parse_args()

# Sanity

if not os.path.exists(args.dirsource):
    print("dmce-copy-headers: Error, source directory does not exist: " + args.dirsource)
    sys.exit(1)

if not os.path.exists(args.dirdest):
    print("dmce-copy-headers: Error, destination directory does not exist: " + args.dirdest)
    sys.exit(1)

files_to_parse = []
re_files_to_parse   = re.compile(r'.*(\.h|\.hh|\.hpp|\.c|\.cc|\.cpp|\.inc)$')
re_includes         = re.compile(r'.*#include\s*(<|\")((\w|\.|\-|\/|\s)*)((>|\")*)')

includes_array = []

for i in range(200000):
    includes_array.append(None)

def parse_file(f, index):
    includes = []

    open_succeeded = False
    while not open_succeeded:
        try:
            fp = open(f, errors="replace")
            open_succeeded = True
        except FileNotFoundError as exn:
            includes_array[index] = exn
            return
        except:
            time.sleep(1)

    code = fp.readlines()
    for line in code:
        m = re_includes.match(line)
        if m:
            if m.group(2) not in includes:
                includes.append(m.group(2))

    includes_array[index] = includes.copy()

for path, curdir_dummy, files in os.walk(args.dirsource):
    for f in files:
        if re_files_to_parse.match(f):
            files_to_parse.append(os.path.join(path, f))

threads = []

# TODO: spawn thread for each index
for index in range(len(files_to_parse)):
#    parse_file(files_to_parse[index], index)
    t = Thread(target=parse_file, args=(files_to_parse[index],index,))
    threads.append(t)
    t.start()

# TODO: Join threads after which includes_array is ready
for t in threads:
    t.join()

threads = []

uniq_includes_array = []

for i in range(len(includes_array)):
    if isinstance(includes_array[i], Exception):
        raise includes_array[i]
    elif includes_array[i] is None:
        break
    for include in includes_array[i]:
        if include not in uniq_includes_array:
            uniq_includes_array.append(include)

def tcopy(src, dst):
    copy_succeded = False
    while not copy_succeded:
        try:
            shutil.copy(src, dst)
            copy_succeded = True
        except:
            time.sleep(1)

for include in uniq_includes_array:
    # To be found in tree?
    for fsource in files_to_parse:
        if re.match(".*" + "/" + include.strip() + "$", fsource):
            # Found subpath/file in tree

            # path exist? If not, create it
            path = os.path.dirname(args.dirdest + "/" + include.strip())
            f = os.path.basename(args.dirdest + "/" + include.strip())
            if not os.path.exists(path):
                os.makedirs(path)

            # copy file to path
            t = Thread(target = tcopy, args = (fsource, path, ))
            threads.append(t)
            t.start()
            break

for t in threads:
    t.join()
