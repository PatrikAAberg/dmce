#!/usr/bin/python3

# Copyright (c) 2021 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import numpy as np
import sys
import argparse
import os

descr = 'Print DMCE coverage, hit and total number of instrumentation probes.'

parser = argparse.ArgumentParser(description=descr)
parser.add_argument('dfile',            type=str,                   help='Binary input file')
parser.add_argument('probefile',        type=str,                   help='mypath/probe-references.log')
parser.add_argument('-v', '--verbose',  action='store_true',        help='verbose output')
args = parser.parse_args()

dfile = args.dfile
probefile = args.probefile
printverbose = args.verbose

# parse the probe reference
with open(probefile, 'r') as pf:
     prefs = pf.readlines()

nprobes = len(prefs)

# read probe data from run
data = np.fromfile(dfile, dtype=np.int32)
for i in range(nprobes, data.size):
     if data[i] != 0:
          print("Data file contains non-zero values outside of valid range.")
          print("File likely corrupted. Aborting.")
          sys.exit(1)

# combine into one list
res = []
for probe in range(nprobes):
     rec = prefs[probe].rstrip().split(':')
     rec.append(data[probe])
     res.append(rec)

# find the probes not executed
skipped = [item for item in res if item[4] == 0]
nskipped = len(skipped)
nhit = nprobes - nskipped

# print short result
if not printverbose:
     print('{:2.2f} {} {}'.format(100*nhit/nprobes, nhit, nprobes))

if printverbose:
     print("\n--- Dmce summary results ---")
     print('Coverage:{:2.2f}%'.format(100*nhit/nprobes))
     print('Probes executed:{}/{}'.format(nhit, nprobes))
     print("\n--- Details ---")
     fullfmt = "{:<10}{:<8}{:<10}{}:{}"
     print(fullfmt.format('id', 'status', 'count', 'file', 'line'))
     for entry in res:
          if entry[4] == 0:
               print(fullfmt.format(entry[0], 'MISS', entry[4], entry[1], entry[2]))
          else:
               print(fullfmt.format(entry[0], 'HIT', entry[4], entry[1], entry[2]))
