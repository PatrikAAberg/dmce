#!/usr/bin/env bash

# Copyright (c) 2016 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

install_path=$PWD

echo "dmce local configurator"
echo "-----------------------"
echo "Creating .dmceconfig file in $HOME"
echo "dmce will look for executables and filters in $install_path"
# Add dmce git repo to path so that we can call dmce-launcher from within gits
PATH="$install_path $PATH"
export PATH

# Remove old config
[ -e $HOME/.dmceconfig ] && rm $HOME/.dmceconfig

_user=
if [ "x${USER}" != "x" ]; then
	_user="${USER}"
elif [ "x${LOGNAME}" != "x" ]; then
	_user="${LOGNAME}"
elif command -v whoami > /dev/null; then
	_user="$(whoami)"
else
	_user="dmce"
fi

# Create config file in home directory
cat > $HOME/.dmceconfig <<- NoWord
# DMCE install path
DMCE_EXEC_PATH:$install_path

# Working directory root
DMCE_WORK_PATH:/tmp/${_user}/dmce

# config files path. (dmce.exclude, dmce.include etc.)
DMCE_CONFIG_PATH:$install_path

# Command line lookup hook (builds list of individual compile commands per file if not enough with the default ones)
DMCE_CMD_LOOKUP_HOOK:$install_path/cmdlookuphook.sh

# Default compiler command line for c files
DMCE_DEFAULT_C_COMMAND_LINE:gcc -I/usr/include -I/usr/include/sys -isystem /tmp/${_user}/dmce/inc -I/tmp/${_user}/dmce/inc

# Default compiler command line for cpp files
DMCE_DEFAULT_CPP_COMMAND_LINE:gcc -std=c++17 -I/usr/include -I/usr/include/sys -isystem /tmp/${_user}/dmce/inc -I/tmp/${_user}/dmce/inc

# Default compiler command line for h files
DMCE_DEFAULT_H_COMMAND_LINE:gcc -std=c++17 -I/usr/include -I/usr/include/sys -isystem /tmp/${_user}/dmce/inc -I/tmp/${_user}/dmce/inc

# Number of data variables to probe
DMCE_NUM_DATA_VARS:0

# Allow trace probes to dereference pointers [YES|NO]
DMCE_ALLOW_DEREFERENCES:YES

# Probe definition c file
DMCE_PROBE_SOURCE:$install_path/probe-examples/dmce-probe-user.c

# Prolog definition c file
DMCE_PROBE_PROLOG:$install_path/probe-examples/dmce-prolog-default.c

# Post hook for running script after probing
DMCE_POST_HOOK:$install_path/dmce-post-hook-null

# Use system inlcude files (YES | NO)
DMCE_SYS_INCLUDES:NO

# Log files
DMCE_LOG_FILES:/tmp/${_user}/dmce

# git diff algorithm
DMCE_GIT_DIFF_ALGORITHM:histogram

# Trace probes can use this define for buffer sizes
DMCE_PROBE_DEFINE:DMCE_PROBE_NBR_TRACE_ENTRIES (1024 * 32)

# Some probes need a path for output files
DMCE_PROBE_DEFINE:DMCE_PROBE_OUTPUT_PATH "/tmp/${_user}/dmce"

# Some probes need a system wide lock dir
DMCE_PROBE_DEFINE:DMCE_PROBE_LOCK_DIR "/tmp/${_user}/dmce-trace-buffer-lock"

# Some probes need a deafult setting for trace enabled at program entry
DMCE_PROBE_DEFINE:DMCE_PROBE_TRACE_ENABLED (1)

# Some utilties need an editor
DMCE_EDITOR:vim

NoWord
echo "...done. Please notice that a .dmceconfig file in the git where dmce is launched will override this file."
